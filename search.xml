<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/09/22/ji-suan-ji-wang-luo/"/>
      <url>/2022/09/22/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>asfasdfasd</p><ul><li>阿斯顿发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构1</title>
      <link href="/2022/09/22/shu-ju-jie-gou-1/"/>
      <url>/2022/09/22/shu-ju-jie-gou-1/</url>
      
        <content type="html"><![CDATA[<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>asfasdfasd</p><ul><li>阿斯顿发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/09/22/shu-ju-jie-gou/"/>
      <url>/2022/09/22/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="这是数据结构文章"><a href="#这是数据结构文章" class="headerlink" title="这是数据结构文章"></a>这是数据结构文章</h3><ul><li>队列</li><li>栈</li><li>二叉树</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo GitHub搭建个人博客</title>
      <link href="/2022/09/21/hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2022/09/21/hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github-搭建个人博客"><a href="#Hexo-github-搭建个人博客" class="headerlink" title="Hexo + github 搭建个人博客"></a>Hexo + github 搭建个人博客</h1><h2 id="一、-环境准备"><a href="#一、-环境准备" class="headerlink" title="一、 环境准备"></a>一、 环境准备</h2><ul><li>安装Node.js</li><li>安装Git</li></ul><h3 id="1、安装并配置Node-js"><a href="#1、安装并配置Node-js" class="headerlink" title="1、安装并配置Node.js"></a>1、安装并配置Node.js</h3><p>Hexo是基于Node.js编写的，所以需要安装Node.js和里面的npm工具。</p><p>windows：[node.js][<a href="https://nodejs.org/en/download/]%E9%80%89%E6%8B%A9LTS%E7%89%88%E6%9C%AC%E5%8D%B3%E5%8F%AF%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%88%B0%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://nodejs.org/en/download/]选择LTS版本即可，直接到官网下载安装</a></p><ul><li><p>Node.js(Node.js版本需要不低于10.13，建议使用Node.js 12.0 及以上版本)</p></li><li><p>Node自带npm</p><p><img src="https://pic2.zhimg.com/80/v2-e9ee44eab73fa10f1c52dd2ef267d971_1440w.jpg"></p></li></ul><h3 id="2、安装并配置Git"><a href="#2、安装并配置Git" class="headerlink" title="2、安装并配置Git"></a>2、安装并配置Git</h3><p>windows：到git官网[Download git][<a href="https://gitforwindows.org/]%E4%B8%8A%E4%B8%8B%E8%BD%BD%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E5%8D%95%E5%87%BB%E5%8F%B3%E9%94%AE%E4%BC%9A%E6%9C%89%E4%B8%80%E4%B8%AAGit">https://gitforwindows.org/]上下载，下载后单击右键会有一个Git</a> Bash的命令行工具，以后通过这个工具来使用git</p><h3 id="3、版本检查"><a href="#3、版本检查" class="headerlink" title="3、版本检查"></a>3、版本检查</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span>  <span class="token comment">#检查node版本</span><span class="token function">npm</span> <span class="token parameter variable">-v</span> <span class="token comment">#检查npm版本</span><span class="token function">git</span> <span class="token parameter variable">--version</span> <span class="token comment">#检查git版本</span></code></pre><p>如果出现对应的版本号，那么表示本地环境搭建成功</p><p><img src="https://pic2.zhimg.com/80/v2-d7dd3c51e2cc7eec354caca723351961_1440w.jpg"></p><h2 id="二、Hexo搭建及基本配置"><a href="#二、Hexo搭建及基本配置" class="headerlink" title="二、Hexo搭建及基本配置"></a>二、Hexo搭建及基本配置</h2><h3 id="1、GitHub注册"><a href="#1、GitHub注册" class="headerlink" title="1、GitHub注册"></a>1、GitHub注册</h3><ul><li><p>进入GitHub官网，点击注册</p></li><li><p>注册用户名，进行绑定邮箱等操作</p></li><li><p>在任一文件夹中，点击鼠标右键，点击 <code>Git Bash Here</code></p></li><li><p>依次输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的GitHub邮箱"</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-11e02793f81bf7b5bc1d31952828b9f7_1440w.jpg"></p></li></ul><p>可以使用以下两条命令，检查一下你是否输入正确</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><ul><li><p>输入以下命令，生成SSH秘钥：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"github邮箱"</span></code></pre></li><li><p>然后一路回车，创建SSH秘钥。这个时候它会告诉你已经生成 .ssh 的文件夹，在电脑中找到这个文件夹</p><blockquote><p>ssh:简单来讲，就是一个秘钥。其中，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看；<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p></blockquote></li><li><p>进入下面路径</p><pre class="language-none"><code class="language-none">.ssh生成路径：C:\Users\用户名\.ssh</code></pre><p><img src="https://pic1.zhimg.com/80/v2-f1480143361c61191fa906f04c3dea70_1440w.jpg"></p></li><li><p>用记事本或Notepad++打开 <code>id_rsa.pub</code>文件，复制里面的内容</p></li><li><p>登录GitHub，进入<code>setting</code>。</p><p><img src="https://pic3.zhimg.com/80/v2-43404d4f1c74e651fd6bf9ec3938ca56_1440w.jpg"></p></li><li><p>选择左边的 <code>SSH and GPG Keys</code>选项，进行添加加密</p><p><img src="https://pic3.zhimg.com/80/v2-c7b7637f00b0c9044dd48bd6b6c56e12_1440w.jpg"></p></li><li><p>点击<code>New SSH Key</code>进行添加</p><p><img src="https://pic2.zhimg.com/80/v2-647a61b616a85e348b6e6e2cd1210a41_1440w.jpg"></p></li><li><p>Title自己取名字，把刚才复制的秘钥粘贴到Key中，然后点击<code>Add SSH Key</code>添加完成。</p></li></ul><p><img src="https://pic4.zhimg.com/v2-c15dc054e5c877f0dfa66fc4de8c4c5b_r.jpg"></p><ul><li><p>测定ssh是否绑定成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com</code></pre><p>出现<code>Are you sure……</code>的时候输入yes回车。</p><p>最后显示<code>You&#39;ve successfully……</code>的时候表示连接成功。</p></li></ul><h3 id="2、创建GitHub-Pages仓库"><a href="#2、创建GitHub-Pages仓库" class="headerlink" title="2、创建GitHub Pages仓库"></a>2、创建GitHub Pages仓库</h3><blockquote><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。可以把它理解为动态网站的主机。</p></blockquote><ul><li><p>打开GitHub，点击右上角加号，然后点击<code>New repository</code>新建GitHub Pages仓库。</p><p><img src="https://pic2.zhimg.com/80/v2-3369168e1161c6ce7b1d87ceb6ce388d_1440w.jpg"></p></li><li><p>在Repository name中输入：<code>用户名.github.io</code></p></li><li><p><code>Description</code><strong>选填</strong>。</p></li><li><p><strong>勾选</strong><code>Initialize this repository with a README</code></p></li><li><p>填好后点击<code>Create repository</code>。创建后默认启用HTTPS。</p></li><li><p><strong>博客的地址为:</strong><code>https://用户名.github.io</code></p></li></ul><p><img src="https://pic4.zhimg.com/80/v2-7ca628d66faba34720d562f5c5517747_1440w.jpg"></p><ul><li>这样GitHub仓库就创建完成了</li></ul><p><img src="https://pic1.zhimg.com/80/v2-9accac61be6b819a4890f32f9ba91e78_1440w.jpg"></p><h3 id="3、安装Hexo博客"><a href="#3、安装Hexo博客" class="headerlink" title="3、安装Hexo博客"></a>3、安装Hexo博客</h3><ul><li><p>首先在电脑磁盘*(自己选择想要存放博客程序，文件以及后续博客美化等文件的磁盘)*中新建一个文件夹，我这里命名<code>Blog-Hexo</code>，<strong>路径中最好不要存在中文</strong>。</p></li><li><p>新建后打开此文件，右键打开<code>Git Bash Here</code>进入git命令窗口 <em>(之前打开的可以关闭了)</em></p></li><li><p><strong>注意：一定要在<code>Blog-Hexo</code>文件夹中打开命令行</strong></p></li><li><p>使用npm安装Hexo博客程序。输入：</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p><img src="https://pic1.zhimg.com/80/v2-d7ce8dfd9e72326b510dce9ab866a8ac_1440w.jpg"></p><ul><li>初始化和安装所需的组件。输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init</code></pre><p><img src="https://pic2.zhimg.com/80/v2-861490b724ad21c95677dba52750d90d_1440w.jpg"></p><ul><li>这时候我们Blog-Hexo文件夹中就会生成一些目录文件：</li></ul><blockquote><p>node_modules：依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章和图片等等<br>themes：主题文件夹，后面美化博客时会用到<br><strong>_config.yml：博客的网站配置文件</strong>(太重要了！！！)</p></blockquote><ul><li>Hexo博客初始化就完成了，下面我们启用本地服务器进行本地预览。继续在命令行输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g  <span class="token comment">#生成静态页面</span></code></pre><p><img src="https://pic3.zhimg.com/80/v2-137b70036cad0d9e65c240568526f9b6_1440w.jpg"></p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo s   <span class="token comment">#启动预览</span></code></pre><p>一会命令行将会看到<code>http://localhost:4000</code>，现在就可以使用浏览器本地预览了，注意预览时<strong>不要</strong>按到<strong>Ctrl+C</strong>停止预览。</p><p><img src="https://pic4.zhimg.com/80/v2-b8d52ec38bea9ffadc41d00ab6926307_1440w.jpg"></p><p>打开浏览器，在地址栏中输入：</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:4000</code></pre><p>此时就可以看到创建的个人博客主题了，这是Hexo的默认界面</p><p><img src="https://pic2.zhimg.com/80/v2-effd11686c4e083c4a3b1df649a51731_1440w.jpg"></p><p>那么，恭喜！本地博客安装成功了！</p><h3 id="4、上传部署Github"><a href="#4、上传部署Github" class="headerlink" title="4、上传部署Github"></a>4、上传部署Github</h3><p>前面我们只能通过4000端口进行预览，只能自己看到，别人是看不到的，所以我们做这一步的目的是：使其能够通过域名或者网站访问。</p><ul><li>需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</li></ul><p>​        首先<code>Ctrl+c</code>断开本地预览，接着输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre><p><img src="https://pic2.zhimg.com/80/v2-dea692904c72ffd4776ed4184ce56d5d_1440w.jpg"></p><ul><li>在博客文件夹中打开网站配置文件_config.yml。（如果电脑上有写代码的编辑器就用编辑器打开，没有就用记事本打开。）</li></ul><p>​找到文件末尾，在此处加上下面的代码：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p><img src="https://pic3.zhimg.com/80/v2-b56928ba2617c4e530c115c11c5b8e92_1440w.jpg"></p><ul><li>然后在命令行依次输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#即hexo generate，生成静态文章</span>hexo d <span class="token comment">#即hexo deploy，部署文章</span></code></pre><ul><li>上传成功后我们就可以使用网址进行访问了。网址为：</li></ul><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;你的用户名.github.io</code></pre><p>那么，到这里搭建及美化Hexo的第一期教程就结束咯。</p><h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"name"</span>        <span class="token comment">#新建文章</span>hexo new page <span class="token string">"name"</span>   <span class="token comment">#新建页面</span>hexo g                 <span class="token comment">#生成页面</span>hexo d                 <span class="token comment">#部署</span>hexo g <span class="token parameter variable">-d</span>              <span class="token comment">#生成页面并部署</span>hexo s                 <span class="token comment">#本地预览</span>hexo clean             <span class="token comment">#清除缓存和已生成的静态文件</span></code></pre><p><strong>发布文章的时候用</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean        <span class="token comment">#清除缓存和已生成的静态文件</span>hexo g            <span class="token comment">#生成页面</span>hexo s            <span class="token comment">#本地预览</span>hexo d            <span class="token comment">#部署</span></code></pre><blockquote><p><code>hexo clean</code> 和 <code>hexo s</code>没必要每次都用，但是<code>hexo g</code> 和 <code>hexo d</code> 每次部署都要用到。<br>部署到博客界面可能很慢，多刷新或耐心等待下~</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub搭建个人博客</title>
      <link href="/2022/09/21/hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2022/09/21/hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github-搭建个人博客"><a href="#Hexo-github-搭建个人博客" class="headerlink" title="Hexo + github 搭建个人博客"></a>Hexo + github 搭建个人博客</h1><h2 id="一、-环境准备"><a href="#一、-环境准备" class="headerlink" title="一、 环境准备"></a>一、 环境准备</h2><ul><li>安装Node.js</li><li>安装Git</li></ul><h3 id="1、安装并配置Node-js"><a href="#1、安装并配置Node-js" class="headerlink" title="1、安装并配置Node.js"></a>1、安装并配置Node.js</h3><p>Hexo是基于Node.js编写的，所以需要安装Node.js和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/">node.js</a>选择LTS版本即可，直接到官网下载安装</p><ul><li><p>Node.js(Node.js版本需要不低于10.13，建议使用Node.js 12.0 及以上版本)</p></li><li><p>Node自带npm</p><p><img src="https://pic2.zhimg.com/80/v2-e9ee44eab73fa10f1c52dd2ef267d971_1440w.jpg"></p></li></ul><h3 id="2、安装并配置Git"><a href="#2、安装并配置Git" class="headerlink" title="2、安装并配置Git"></a>2、安装并配置Git</h3><p>windows：到git官网<a href="https://gitforwindows.org/">Download git</a>上下载，下载后单击右键会有一个Git Bash的命令行工具，以后通过这个工具来使用git</p><h3 id="3、版本检查"><a href="#3、版本检查" class="headerlink" title="3、版本检查"></a>3、版本检查</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span>  <span class="token comment">#检查node版本</span><span class="token function">npm</span> <span class="token parameter variable">-v</span> <span class="token comment">#检查npm版本</span><span class="token function">git</span> <span class="token parameter variable">--version</span> <span class="token comment">#检查git版本</span></code></pre><p>如果出现对应的版本号，那么表示本地环境搭建成功</p><p><img src="https://pic2.zhimg.com/80/v2-d7dd3c51e2cc7eec354caca723351961_1440w.jpg"></p><h2 id="二、Hexo搭建及基本配置"><a href="#二、Hexo搭建及基本配置" class="headerlink" title="二、Hexo搭建及基本配置"></a>二、Hexo搭建及基本配置</h2><h3 id="1、GitHub注册"><a href="#1、GitHub注册" class="headerlink" title="1、GitHub注册"></a>1、GitHub注册</h3><ul><li><p>进入GitHub官网，点击注册</p></li><li><p>注册用户名，进行绑定邮箱等操作</p></li><li><p>在任一文件夹中，点击鼠标右键，点击 <code>Git Bash Here</code></p></li><li><p>依次输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的GitHub邮箱"</span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-11e02793f81bf7b5bc1d31952828b9f7_1440w.jpg"></p></li></ul><p>可以使用以下两条命令，检查一下你是否输入正确</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><ul><li><p>输入以下命令，生成SSH秘钥：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"github邮箱"</span></code></pre></li><li><p>然后一路回车，创建SSH秘钥。这个时候它会告诉你已经生成 .ssh 的文件夹，在电脑中找到这个文件夹</p><blockquote><p>ssh:简单来讲，就是一个秘钥。其中，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看；<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p></blockquote></li><li><p>进入下面路径</p><pre class="language-none"><code class="language-none">.ssh生成路径：C:\Users\用户名\.ssh</code></pre><p><img src="https://pic1.zhimg.com/80/v2-f1480143361c61191fa906f04c3dea70_1440w.jpg"></p></li><li><p>用记事本或Notepad++打开 <code>id_rsa.pub</code>文件，复制里面的内容</p></li><li><p>登录GitHub，进入<code>setting</code>。</p><p><img src="https://pic3.zhimg.com/80/v2-43404d4f1c74e651fd6bf9ec3938ca56_1440w.jpg"></p></li><li><p>选择左边的 <code>SSH and GPG Keys</code>选项，进行添加加密</p><p><img src="https://pic3.zhimg.com/80/v2-c7b7637f00b0c9044dd48bd6b6c56e12_1440w.jpg"></p></li><li><p>点击<code>New SSH Key</code>进行添加</p><p><img src="https://pic2.zhimg.com/80/v2-647a61b616a85e348b6e6e2cd1210a41_1440w.jpg"></p></li><li><p>Title自己取名字，把刚才复制的秘钥粘贴到Key中，然后点击<code>Add SSH Key</code>添加完成。</p></li></ul><p><img src="https://pic4.zhimg.com/v2-c15dc054e5c877f0dfa66fc4de8c4c5b_r.jpg"></p><ul><li><p>测定ssh是否绑定成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com</code></pre><p>出现<code>Are you sure……</code>的时候输入yes回车。</p><p>最后显示<code>You&#39;ve successfully……</code>的时候表示连接成功。</p></li></ul><h3 id="2、创建GitHub-Pages仓库"><a href="#2、创建GitHub-Pages仓库" class="headerlink" title="2、创建GitHub Pages仓库"></a>2、创建GitHub Pages仓库</h3><blockquote><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。可以把它理解为动态网站的主机。</p></blockquote><ul><li><p>打开GitHub，点击右上角加号，然后点击<code>New repository</code>新建GitHub Pages仓库。</p><p><img src="https://pic2.zhimg.com/80/v2-3369168e1161c6ce7b1d87ceb6ce388d_1440w.jpg"></p></li><li><p>在Repository name中输入：<code>用户名.github.io</code></p></li><li><p><code>Description</code><strong>选填</strong>。</p></li><li><p><strong>勾选</strong><code>Initialize this repository with a README</code></p></li><li><p>填好后点击<code>Create repository</code>。创建后默认启用HTTPS。</p></li><li><p><strong>博客的地址为:</strong><code>https://用户名.github.io</code></p></li></ul><p><img src="https://pic4.zhimg.com/80/v2-7ca628d66faba34720d562f5c5517747_1440w.jpg"></p><ul><li>这样GitHub仓库就创建完成了</li></ul><p><img src="https://pic1.zhimg.com/80/v2-9accac61be6b819a4890f32f9ba91e78_1440w.jpg"></p><h3 id="3、安装Hexo博客"><a href="#3、安装Hexo博客" class="headerlink" title="3、安装Hexo博客"></a>3、安装Hexo博客</h3><ul><li><p>首先在电脑磁盘*(自己选择想要存放博客程序，文件以及后续博客美化等文件的磁盘)*中新建一个文件夹，我这里命名<code>Blog-Hexo</code>，<strong>路径中最好不要存在中文</strong>。</p></li><li><p>新建后打开此文件，右键打开<code>Git Bash Here</code>进入git命令窗口 <em>(之前打开的可以关闭了)</em></p></li><li><p><strong>注意：一定要在<code>Blog-Hexo</code>文件夹中打开命令行</strong></p></li><li><p>使用npm安装Hexo博客程序。输入：</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p><img src="https://pic1.zhimg.com/80/v2-d7ce8dfd9e72326b510dce9ab866a8ac_1440w.jpg"></p><ul><li>初始化和安装所需的组件。输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init</code></pre><p><img src="https://pic2.zhimg.com/80/v2-861490b724ad21c95677dba52750d90d_1440w.jpg"></p><ul><li>这时候我们Blog-Hexo文件夹中就会生成一些目录文件：</li></ul><blockquote><p>node_modules：依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章和图片等等<br>themes：主题文件夹，后面美化博客时会用到<br><strong>_config.yml：博客的网站配置文件</strong>(太重要了！！！)</p></blockquote><ul><li>Hexo博客初始化就完成了，下面我们启用本地服务器进行本地预览。继续在命令行输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g  <span class="token comment">#生成静态页面</span></code></pre><p><img src="https://pic3.zhimg.com/80/v2-137b70036cad0d9e65c240568526f9b6_1440w.jpg"></p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo s   <span class="token comment">#启动预览</span></code></pre><p>一会命令行将会看到<code>http://localhost:4000</code>，现在就可以使用浏览器本地预览了，注意预览时<strong>不要</strong>按到<strong>Ctrl+C</strong>停止预览。</p><p><img src="https://pic4.zhimg.com/80/v2-b8d52ec38bea9ffadc41d00ab6926307_1440w.jpg"></p><p>打开浏览器，在地址栏中输入：</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:4000</code></pre><p>此时就可以看到创建的个人博客主题了，这是Hexo的默认界面</p><p><img src="https://pic2.zhimg.com/80/v2-effd11686c4e083c4a3b1df649a51731_1440w.jpg"></p><p>那么，恭喜！本地博客安装成功了！</p><h3 id="4、上传部署Github"><a href="#4、上传部署Github" class="headerlink" title="4、上传部署Github"></a>4、上传部署Github</h3><p>前面我们只能通过4000端口进行预览，只能自己看到，别人是看不到的，所以我们做这一步的目的是：使其能够通过域名或者网站访问。</p><ul><li>需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</li></ul><p>​        首先<code>Ctrl+c</code>断开本地预览，接着输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre><p><img src="https://pic2.zhimg.com/80/v2-dea692904c72ffd4776ed4184ce56d5d_1440w.jpg"></p><ul><li>在博客文件夹中打开网站配置文件_config.yml。（如果电脑上有写代码的编辑器就用编辑器打开，没有就用记事本打开。）</li></ul><p>​找到文件末尾，在此处加上下面的代码：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p><img src="https://pic3.zhimg.com/80/v2-b56928ba2617c4e530c115c11c5b8e92_1440w.jpg"></p><ul><li>然后在命令行依次输入：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#即hexo generate，生成静态文章</span>hexo d <span class="token comment">#即hexo deploy，部署文章</span></code></pre><ul><li>上传成功后我们就可以使用网址进行访问了。网址为：</li></ul><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;你的用户名.github.io</code></pre><p>那么，到这里搭建及美化Hexo的第一期教程就结束咯。</p><h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"name"</span>        <span class="token comment">#新建文章</span>hexo new page <span class="token string">"name"</span>   <span class="token comment">#新建页面</span>hexo g                 <span class="token comment">#生成页面</span>hexo d                 <span class="token comment">#部署</span>hexo g <span class="token parameter variable">-d</span>              <span class="token comment">#生成页面并部署</span>hexo s                 <span class="token comment">#本地预览</span>hexo clean             <span class="token comment">#清除缓存和已生成的静态文件</span></code></pre><p><strong>发布文章的时候用</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean        <span class="token comment">#清除缓存和已生成的静态文件</span>hexo g            <span class="token comment">#生成页面</span>hexo s            <span class="token comment">#本地预览</span>hexo d            <span class="token comment">#部署</span></code></pre><blockquote><p><code>hexo clean</code> 和 <code>hexo s</code>没必要每次都用，但是<code>hexo g</code> 和 <code>hexo d</code> 每次部署都要用到。<br>部署到博客界面可能很慢，多刷新或耐心等待下~</p></blockquote><h2 id="主题及问题总结"><a href="#主题及问题总结" class="headerlink" title="主题及问题总结"></a>主题及问题总结</h2><blockquote><p>本人使用的hexo主题为<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，效果图如下：</p></blockquote><p><img src="https://camo.githubusercontent.com/ca91ff24a662fc02f64cfed3446fadc7d84dade01a698ebe3dd7b3710926489a/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d312e706e67"></p><p><img src="https://camo.githubusercontent.com/cc39895742d9eb7a90d25b8f4935be41a4feffc034eb1e3f665316699634e5cc/687474703a2f2f7374617469632e626c696e6b666f782e636f6d2f6d61746572792d32303138313230322d322e706e67"></p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h3 id="1、代码高亮"><a href="#1、代码高亮" class="headerlink" title="1、代码高亮"></a>1、代码高亮</h3><blockquote><p>默认的代码高亮很丑，因此主题作者给了一种解决方案，对比如下图所示</p></blockquote><ul><li>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</li><li>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><ul><li><strong>完成配置后一定要注意先清除缓存，然后再启动，否则配置修改可能不生效</strong>，命令如下</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment">#清除缓存</span>hexo s       <span class="token comment">#启动预览</span></code></pre><p><img src="https://oss-emcsprod-public.modb.pro/wechatSpider/modb_20210624_38607c6e-d500-11eb-8d30-00163e068ecd.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/09/20/post/"/>
      <url>/2022/09/20/post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进步 </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post</title>
      <link href="/2022/09/20/post-fu-ben/"/>
      <url>/2022/09/20/post-fu-ben/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/09/20/hello-world/"/>
      <url>/2022/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><!--- more ---><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> HelloWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 进步 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
